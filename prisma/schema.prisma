generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"

    url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
    directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model Channel {
    id String @id @default(cuid())

    members  User[]
    messages Message[]

    createdAt DateTime @default(now())
}

model Group {
    id String @id @default(cuid())

    members  User[]
    messages Message[]

    createdAt DateTime @default(now())
}

model Message {
    id String @id @default(cuid())

    images String[]
    text   String?

    isEdited Boolean @default(false)

    sender   User   @relation("sender", fields: [senderId], references: [id])
    senderId String

    recipient   User?   @relation("recipient", fields: [recipientId], references: [id])
    recipientId String?

    isRecipientReaded Boolean?

    views User[] @relation("views")

    createdAt DateTime @default(now())

    group   Group?  @relation(fields: [groupId], references: [id])
    groupId String?

    channel   Channel? @relation(fields: [channelId], references: [id])
    channelId String?
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    username      String?   @unique
    email         String?   @unique
    emailVerified DateTime?
    lastOnlineAt  DateTime  @default(now())
    image         String?
    password      String?
    accounts      Account[]
    sessions      Session[]

    sendedMessages   Message[] @relation("sender")
    recievedMessages Message[] @relation("recipient")
    viewedMessages   Message[] @relation("views")

    channels Channel[]
    groups   Group[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
